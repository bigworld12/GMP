<Controls:MetroWindow x:Class="GMP.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"                      
                      xmlns:vm="clr-namespace:GMP.ViewModel"                      
                      xmlns:local1="clr-namespace:GMP"
                      xmlns:local="clr-namespace:GMP.Classes"
                      xmlns:flys="clr-namespace:GMP.FlyOuts"
                      xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
                      xmlns:conv="clr-namespace:GMP.Converters"                      
                      xmlns:enums="clr-namespace:GMP.Enums"
                      xmlns:ext="clr-namespace:GMP.Extentions"
                      xmlns:sys="clr-namespace:System;assembly=mscorlib"   
                      
                      mc:Ignorable="d"
                      xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
                      BorderThickness="0" 
                      GlowBrush="Black"        
                      xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
                      x:Name="MainWin"
                      ResizeMode="CanMinimize"                      
                      Title="{Binding Path=ReadableTitle,Mode=OneWay,ElementName=MainWin,UpdateSourceTrigger=PropertyChanged}"
                      WindowStartupLocation="CenterScreen" Loaded="MainWin_Loaded"
                      Height="500" Width="Auto" Icon="1469413104_music.ico" ShowIconOnTitleBar="True">
    <Controls:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ListBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Themes/IconPacks.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}"
                    x:Key="RepeatModesProvider" IsInitialLoadEnabled="False" >
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enums:RepeatModes"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <vm:MainViewModel x:Key="ViewModel"/>
            <flys:CommunicationObject x:Key="comobj"/>

            <conv:RepeatModeStringConverter x:Key="RepeatModeStringConv"/>
            <conv:TooltipValueConverter x:Key="ToolTipValueConv"/>
            <conv:TrueToVisibleConverter x:Key="TrueToVisibleConv"/>
            <conv:FalseToVisibleConverter x:Key="FalseToVisibleConv"/>
        </ResourceDictionary>
    </Controls:MetroWindow.Resources>
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <Button Click="OpenHotKeySettingsFlyOut_Click" Content="HotKey Settings"/>
            <Button Click="ShowLogButton_Click" Content="Show Log"/>
            <Button Content="Save" Click="SaveButton_Click"/>
            <Button Content="Test Overlay Image" Click="TestOverlayImageButton_Click"></Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>

    <Controls:MetroWindow.Flyouts>
        <Controls:FlyoutsControl>
            <Controls:Flyout Header="Hotkey settings" x:Name="HotKSetFly">
                <flys:HKSettings CommunicationObj="{StaticResource comobj}"/>
            </Controls:Flyout>
            <Controls:Flyout Header="Log" x:Name="LogFly" Position="Bottom">
                <flys:LogFlyOut />
            </Controls:Flyout>
        </Controls:FlyoutsControl>
    </Controls:MetroWindow.Flyouts>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Margin="5">
            <StackPanel Orientation="Horizontal" Grid.Row="0">
                <TextBlock Text="Playing : "/>
                <TextBlock Text="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.SongName,FallbackValue='No Songs',UpdateSourceTrigger=PropertyChanged,TargetNullValue='No Songs',IsAsync=True}"/>
            </StackPanel>
            <ext:FormattedSlider Validation.ErrorTemplate="{x:Null}"
                                 Style="{StaticResource ResourceKey=MetroSlider}"
                                 PreviewMouseUp="PlayingMusicProgressSlider_MouseUp"
                                 PreviewMouseDown="PlayingMusicProgressSlider_MouseDown"
                                 Margin="10" 
                                 x:Name="PlayingMusicProgressSlider"
                                 IsMoveToPointEnabled="True"
                                 AutoToolTipPlacement="BottomRight"                    
                                 AutoToolTipPrecision="2"
                                 AutoToolTipTextConverter="{StaticResource ToolTipValueConv}"
                                 Value="{Binding ElementName=MainWin,Path=ReadableProgressValue,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                    Maximum="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.MaxDuration,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">


            </ext:FormattedSlider>
            <Grid HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Controls:PackIconMaterial MouseDown="MoveNextSong_MouseDown" Width="30" Height="30" HorizontalAlignment="Right">
                    <Controls:PackIconMaterial.Style>
                        <Style BasedOn="{StaticResource ResourceKey=MahApps.Metro.Styles.PackIconMaterial}" TargetType="Controls:PackIconMaterial">
                            <Setter Property="Kind" Value="SkipNextCircle"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Kind" Value="SkipNextCircleOutline"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Controls:PackIconMaterial.Style>
                </Controls:PackIconMaterial>
                <Controls:PackIconMaterial MouseDown="MovePreviousSong_MouseDown" Width="30" Height="30" HorizontalAlignment="Left">
                    <Controls:PackIconMaterial.Style>
                        <Style TargetType="Controls:PackIconMaterial">
                            <Setter Property="Kind" Value="SkipPreviousCircle"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Kind" Value="SkipPreviousCircleOutline"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Controls:PackIconMaterial.Style>
                </Controls:PackIconMaterial>
                <Controls:PackIconMaterial MouseDown="PlayButton_MouseDown" Width="30" Height="30" Visibility="{Binding Source={StaticResource ViewModel},Path=Music.PlayButtonVisibility,UpdateSourceTrigger=PropertyChanged,FallbackValue=Hidden,TargetNullValue=Hidden}" HorizontalAlignment="Center">
                    <Controls:PackIconMaterial.Style>
                        <Style TargetType="Controls:PackIconMaterial">
                            <Setter Property="Kind" Value="PlayCircle"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Kind" Value="PlayCircleOutline"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Controls:PackIconMaterial.Style>
                </Controls:PackIconMaterial>
                <Controls:PackIconMaterial Width="30" MouseDown="PauseSong_MouseDown" Height="30" Visibility="{Binding Source={StaticResource ViewModel},Path=Music.PauseButtonVisibility,UpdateSourceTrigger=PropertyChanged,FallbackValue=Hidden,TargetNullValue=Hidden}" HorizontalAlignment="Center">
                    <Controls:PackIconMaterial.Style>
                        <Style TargetType="Controls:PackIconMaterial">
                            <Setter Property="Kind" Value="PauseCircle"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Kind" Value="PauseCircleOutline"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Controls:PackIconMaterial.Style>
                </Controls:PackIconMaterial>
                <TextBlock x:Name="ReadableProgressRepresenter" Grid.Column="1" VerticalAlignment="Top" Text="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.ReadableProgress,UpdateSourceTrigger=PropertyChanged,FallbackValue='( 00:00 / 00:00 )',Mode=OneWay}" HorizontalAlignment="Right"/>
            </Grid>
            <CheckBox ToolTip="When Disabled (UnChecked), plays the entire song"
                Validation.ErrorTemplate="{x:Null}"
                IsChecked="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.IsUseStartEndRange,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                Margin="5"
                Content="Current Song Play Range"  
                x:Name="IsEnableSongPlayRangeCheckBox"/>
            <Controls:RangeSlider
                x:Name="MusicRangeSlider"
                Margin="10" 
                Visibility="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.MusicRangeVisibility,Mode=OneWay,FallbackValue=Hidden,TargetNullValue=Hidden}"
                Validation.ErrorTemplate="{x:Null}"
                
                HorizontalAlignment="Stretch"
                
                Minimum="0"
                Maximum="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.MaxDuration,UpdateSourceTrigger=PropertyChanged,FallbackValue=100,TargetNullValue=100,Mode=OneWay}"
             
                MinRange="0"
                MinRangeWidth="0"                
                
                
                
                LowerValue="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.StartPos,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,FallbackValue=0,TargetNullValue=0,ValidatesOnDataErrors=False}"
                UpperValue="{Binding Source={StaticResource ViewModel},Path=Music.Player.CurrentSong.EndPos,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,ValidatesOnDataErrors=False,FallbackValue=100,TargetNullValue=100}"
                
                AutoToolTipPlacement="BottomRight"
                AutoToolTipPrecision="2"
                AutoToolTipTextConverter="{StaticResource ToolTipValueConv}"                                
                
                IsMoveToPointEnabled="True" Interval="33"/>
        </StackPanel>

        <Grid Margin="5" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="300" MinWidth="300"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel>
                    <ComboBox SelectionChanged="PlaylistsRepresenter_SelectionChanged" x:Name="PlaylistsRepresenter" ItemsSource="{Binding Source={StaticResource ViewModel},Path=Music.PlayLists,IsAsync=True}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="local:PlayList">
                                <Grid>
                                    <TextBlock Text="{Binding UpdateSourceTrigger=PropertyChanged,Path=ReadableRepresentation}"/>
                                </Grid>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Resources>
                            <ContextMenu x:Key="MovePosContxt">
                                <MenuItem Header="Remove PlayList" Click="RemovePlayListMenuItem_Click"/>
                                <Separator/>
                                <MenuItem Header="Move Position To First" Click="MoveFirstMenuItem_Click"/>
                                <MenuItem Header="Move Position Up" Click="MoveUpMenuItem_Click"/>
                                <MenuItem Header="Move Position Down" Click="MoveDownMenuItem_Click"/>
                                <MenuItem Header="Move Position To Last" Click="MoveLastMenuItem_Click"/>
                            </ContextMenu>
                        </ComboBox.Resources>
                        <ComboBox.ItemContainerStyle>
                            <Style BasedOn="{StaticResource MetroComboBoxItem}" TargetType="ComboBoxItem">
                                <Setter Property="ContextMenu" Value="{StaticResource MovePosContxt}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsCurrent}" Value="True">
                                        <Setter Property="Background" Value="#FFCF0F0F"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                    </ComboBox>
                    <TextBox Controls:TextBoxHelper.Watermark="Rename Selected PlayList" Text="{Binding ElementName=PlaylistsRepresenter,Path=SelectedItem.Name,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" MaxLength="40" Controls:TextBoxHelper.UseFloatingWatermark="True"/>
                </StackPanel>
                <ListBox IsTextSearchEnabled="True"
                         IsTextSearchCaseSensitive="False" 
                         TextSearch.TextPath="SongName" SelectionMode="Extended" HorizontalAlignment="Stretch"
                         dd:DragDrop.IsDragSource="True"
                         dd:DragDrop.IsDropTarget="True"
                         dd:DragDrop.UseDefaultDragAdorner="True"
                         dd:DragDrop.UseDefaultEffectDataTemplate="True"
                         dd:DragDrop.DropHandler="{Binding Path=MusicDropHandler}"
                         x:Name="SongsViewer" Grid.Row="1" ItemsSource="{Binding UpdateSourceTrigger=PropertyChanged,ElementName=PlaylistsRepresenter,Path=SelectedItem,Mode=OneWay,IsAsync=True}" SelectionChanged="SongsViewer_SelectionChanged" SelectedIndex="0">
                    <ListBox.Resources>
                        <ContextMenu x:Key="MusicContextMenu">
                            <MenuItem Click="OpenMusicMenuItem_Click" Header="Open"/>
                            <CheckBox IsChecked="{Binding Path=IsFav,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Content="Favorite"/>
                            <Separator/>
                            <MenuItem Header="Remove" Click="RemoveMusicMenuItem_Click"/>
                            <Separator/>
                            <MenuItem Header="Copy To" DisplayMemberPath="ReadableRepresentation" ItemsSource="{Binding Source={StaticResource ViewModel},Path=Music.PlayLists,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource MetroMenuItem}">
                                        <EventSetter Event="Click" Handler="CopyToMenuiItem_Click"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <MenuItem Header="Move To" DisplayMemberPath="ReadableRepresentation" ItemsSource="{Binding Source={StaticResource ViewModel},Path=GetMoveToPlaylists,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource MetroMenuItem}">
                                        <EventSetter Event="Click" Handler="MoveToMenuiItem_Click"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                        </ContextMenu>
                        <ContextMenu x:Key="MultiMusicContextMenu">
                            <MenuItem Header="Remove" Click="RemoveMusicMenuItem_Click"/>
                            <Separator/>
                            <MenuItem Header="Copy To" DisplayMemberPath="ReadableRepresentation" ItemsSource="{Binding Source={StaticResource ViewModel},Path=Music.PlayLists,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource MetroMenuItem}">
                                        <EventSetter Event="Click" Handler="CopyToMenuiItem_Click"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <MenuItem Header="Move To" DisplayMemberPath="ReadableRepresentation" ItemsSource="{Binding Source={StaticResource ViewModel},Path=GetMoveToPlaylists,UpdateSourceTrigger=PropertyChanged,Mode=OneWay}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem" BasedOn="{StaticResource MetroMenuItem}">
                                        <EventSetter Event="Click" Handler="MoveToMenuiItem_Click"/>
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                        </ContextMenu>
                    </ListBox.Resources>
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="local:Song">
                            <TextBlock ToolTipService.BetweenShowDelay="0" ToolTipService.InitialShowDelay="500" ToolTipService.ShowOnDisabled="True"
                                       DataContext="{Binding}"
                                       Background="Transparent"
                                       Text="{Binding UpdateSourceTrigger=PropertyChanged,Path=ReadableRepresentation,TargetNullValue='Null Name',FallbackValue='Null Name'}">
                                <TextBlock.InputBindings>
                                    <MouseBinding MouseAction="LeftDoubleClick"
                                                  Command="{Binding ElementName=MainWin,Path=PlaySongCommand}"
                                                  CommandParameter="{Binding}" />
                                </TextBlock.InputBindings>
                                <TextBlock.ToolTip>
                                    <ToolTip StaysOpen="True">
                                        <StackPanel>
                                            <TextBlock Text="{Binding UpdateSourceTrigger=PropertyChanged,Path=SongName,TargetNullValue='Null Name',FallbackValue='Null Name'}"/>
                                            <TextBlock Text="{Binding UpdateSourceTrigger=PropertyChanged,Path=FullPath,TargetNullValue='Null Path',FallbackValue='Null Path'}"/>
                                        </StackPanel>                                        
                                    </ToolTip>
                                </TextBlock.ToolTip>
                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.ItemContainerStyle>
                        <Style BasedOn="{StaticResource MetroListBoxItem}" TargetType="{x:Type ListBoxItem}">
                            <Setter Property="ContextMenu" Value="{StaticResource MusicContextMenu}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsFav,UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Background" Value="Green"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsCurrent,UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="Background" Value="#FFCF0F0F"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=SongsViewer,Path=(ext:ListBoxHelper.IsMultiSelected),UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ContextMenu" Value="{StaticResource MultiMusicContextMenu}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </Grid>
            <Grid Margin="5,0,0,0" Grid.Column="1">
                <Grid.Resources>
                    <Thickness x:Key="ControlMargin" Top="5" Bottom="5" Left="5" Right="5"/>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>


                <StackPanel Grid.Row="1">
                    <TextBlock Text="Volume"/>
                    <Slider IsMoveToPointEnabled="True" Margin="5" Value="{Binding Source={StaticResource ViewModel},Path=Music.Player.Volume,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Maximum="1" HorizontalAlignment="Stretch"/>


                </StackPanel>

                <Grid Grid.Row="2">
                    <DockPanel>
                        <TextBlock VerticalAlignment="Center" Text="Repeat Mode : "/>
                        <!--TODO-->
                        <ComboBox SelectedIndex="0" ItemsSource="{Binding Mode=OneWay,Source={StaticResource RepeatModesProvider},UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding Source={StaticResource ViewModel},Path=Music.RepeatMode,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type enums:RepeatModes}">
                                    <TextBlock Text="{Binding Converter={StaticResource RepeatModeStringConv}}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </DockPanel>
                </Grid>

                <UniformGrid Columns="3" Grid.Row="3">
                    <UniformGrid.Resources>
                        <Style TargetType="Button" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                            <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
                        </Style>
                    </UniformGrid.Resources>
                    <Button Click="AddSongButton_Click" Content="Add song(s)"/>
                    <Button Click="AddFolderButton_Click" Content="Add Folder(s)" ToolTip="Adds a folder and its sub-directories,each directory in a separate palylist"/>                    
                    <Button Click="AddPlayListButton_Click" Content="Add PlayList"/>
                    <Button Click="RemoveSongsButton_Click" Content="Remove Song(s)"/>
                    <Button Click="RemoveDupilicatesButton_Click" Content="Remove Duplicate Songs"/>
                    <Button Click="RemovePlayListButton_Click" Content="Remove PlayList"/>
                    <Button Click="RemoveInvalidSongsButton_Click" Content="Remove Invalid Songs"/>                    
                </UniformGrid>





            </Grid>
        </Grid>
    </Grid>
</Controls:MetroWindow>
